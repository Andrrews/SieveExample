@page "/students"
@using Sieve.Blazor.Models
@using Sieve.Blazor.Services
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@inject StudentService StudentService
@rendermode InteractiveServer

<h3>Students</h3>

<QuickGrid Items="studentsPageData">
    <PropertyColumn Property="student => student.Id" Title="ID" />
    <PropertyColumn Property="student => student.FirstName" Title="Name" />
    <PropertyColumn Property="student => student.LastName" Title="Age" />
</QuickGrid>
<div>
    <button @onclick="PreviousPage" disabled="@(!students.HasPreviousPage)">Previous</button>
    <button @onclick="NextPage" disabled="@(!students.HasNextPage)">Next</button>
</div>

@code {
    private PagedList<StudentDTO> students = new PagedList<StudentDTO>();
    private IQueryable<StudentDTO> studentsPageData;
    private int currentPage = 1;
    private int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        var queryParams = $"pageSize={pageSize}&page={currentPage}";
        students = await StudentService.GetStudentsAsync(queryParams);
        studentsPageData = students.PageData.AsQueryable();
    }

    private async Task PreviousPage()
    {
        if (students.HasPreviousPage)
        {
            currentPage--;
            await LoadDataAsync();
        }
    }

    private async Task NextPage()
    {
        if (students.HasNextPage)
        {
            currentPage++;
            await LoadDataAsync();
        }
    }
}